# -*- coding: utf-8 -*-
"""Exersice 7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BvjtNDyniME7r8q6phecX2CU5sg5a8sA

Beginner:

Greeting Function: Create a function called greet(name) that takes a name as input and prints a personalized greeting message like "Hello, [name]!".
Area Calculator: Define a function calculate_area(length, width) that calculates the area of a rectangle and returns the result.
Even or Odd Checker: Write a function is_even(number) that checks if a given number is even and returns True or False.
Intermediate:

List Statistics: Design a function get_list_stats(numbers) that takes a list of numbers and returns a dictionary containing the minimum, maximum, and average values.
Password Validator: Create a function validate_password(password) that checks if a password meets certain criteria (e.g., minimum length, containing uppercase and lowercase letters, numbers, or symbols) and returns True or False.
Prime Number Checker: Write a function is_prime(number) that determines if a number is prime (divisible only by 1 and itself) and returns True or False (consider using a loop for efficiency).
Advanced:

Recursive Function - Factorial Calculator: Develop a recursive function factorial(number) that calculates the factorial of a number (product of all positive integers less than or equal to the number).
Nested Function - Currency Converter: Create a function convert_currency(amount, from_currency, to_currency) that uses a nested function to define conversion rates and returns the converted amount.
Function with Default Arguments - Text Analyzer: Design a function analyze_text(text, min_length=10) that takes text and an optional minimum length argument. It returns the number of words in the text exceeding the minimum length.
Bonus Exercise (Challenge):

Mad Libs Generator: Build a function generate_mad_libs(story_template, word_types) that takes a story template with placeholders (e.g., noun, verb, adjective) and a dictionary of word types. It prompts the user for words based on the types and generates a completed Mad Lib story.
Tips:

Encourage viewers to modify the exercises to explore different functionalities.
Briefly explain the purpose of each exercise before demonstrating the solution.
Consider showcasing different ways to solve the same problem using functions (e.g., using loops or built-in functions).
I hope these exercise ideas help make your 7th video engaging and informative for your Python learners!
"""

